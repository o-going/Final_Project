<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" rel="stylesheet" type="text/css" />
   <!--Bootstrap-->
   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
   <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
   <script src="https://code.jquery.com/jquery-3.5.1.min.js" crossorigin="anonymous"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
   <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
   <script src="https://d3js.org/d3.v5.js"></script>

   <link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/select2/3.5.0/select2.min.css"></link>

   <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
   <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/select2/3.5.0/select2.min.js"></script>
   <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js"></script>
   <script src="//cdn.jsdelivr.net/npm/sweetalert2@10"></script>
   <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

   <link rel="stylesheet" href="css/style.css">
   <link rel="stylesheet" href="css/techtree.css">
   <!-- <link rel="preconnect" href="https://fonts.gstatic.com"> -->
   <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700;900&display=swap" rel="stylesheet">   
  
   <style>
     body {
       text-align: center;
     }

     svg {
       /* background-color: rgb(248, 253, 255); */
     }

     .node rect {
       fill: #fff;
       stroke: steelblue;
       stroke-width: 1px;
     }

     .node text{
       font: 20px sans-serif;
       font-weight: 700;
     }

     .link {
      fill: none;
      stroke: #ccc;
      stroke-width: 3px;
    }
    #tree-left {
      overflow-y: scroll;
      overflow-x: hidden;
      height: 1000px;
      scroll-behavior: smooth;
      border-right: 1px solid #aaa;
    }
   </style>

   <title>Document</title>
</head>
<body>
  <!-- Navigation-->
  <nav id="menu" class="navbar navbar-default navbar-fixed-top">
    <div class="container"> 
      <!-- Brand and toggle get grouped for better mobile display -->
      <div class="navbar-header">
        <a class="navbar-brand page-scroll" href="/">TechTree</a> 
      </div>
      <div class="navbar-brand" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav navbar-right">
          <li><a href="techtree" class="page-scroll">Tech Tree</a></li>
          <% if(email == null) { %>
            <li class="login"><a href="Login" class="page-scroll">Login</a></li>
          <% }else { %>
            <li id="username" data-email="<%=email%>"><a href="profile" class="page-scroll"><%=name%>Îãò</a></li>
            <li class="logout"><a href="Logout" class="page-scroll">Logout</a></li>
          <% } %>
        </ul>
      </div>
    </div>
  </nav>
  <!-- <p>
    Scale nodes and edges depending on their value. Hover over nodes and edges to
    get more information.
  </p> -->

  <!-- <div id="search">
  </div> -->
  <div class="tree_btn_group">
    <button class="btn btn-warning btn-lg" id="tech_count"></button>
    <button class="btn btn-outline-info tree_btn btn-sm" data-toggle="portfilter" data-target="all" onclick="expandCollapseAll()">  <!--click ÌñàÏùÑ Îïå event-->
      Ï†ÑÏ≤¥ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞
    </button>
    <!-- <button class="btn btn-primary tree_btn btn-lg" data-toggle="portfilter" data-target="all" onclick="recommend()">
      Îã§Ïùå
    </button> -->
    <button class="btn btn-outline-success tree_btn btn-sm" data-toggle="portfilter" data-target="all" onclick="saveData()">  <!--click ÌñàÏùÑ Îïå event-->
      Ï†ÄÏû•
    </button>
    <button class="btn btn-outline-danger tree_btn btn-sm" data-toggle="portfilter" data-target="all" onclick="refresh()">
      Ï¥àÍ∏∞Ìôî
    </button>
    <button class="btn btn-outline-dark tree_btn btn-sm" data-toggle="portfilter" data-target="all" onclick="category()">
      Îã§Ïùå
    </button>
  </div>
  <div>
    <% for(let i=0; i<user.length; i++) { %>
      <div id='techtreedata' data-techtree="<%=user[i].techtreedata%>" style="display: none;"></div>
    <% } %>
  </div>
  <div id="tree-left" class="col-7"></div>
  <div id="tree-right" class="col-5">
    <div id="choicePosition"></div>
    <div id="right-company"></div>
    <div id="relatedPosition">
    </div>
    <canvas id="myChart" width="100px" height="50%"></canvas>
  </div>
  
  <script type="text/javascript">

  window.addEventListener("load", function() {
    let techCount = document.getElementById('tech_count');
    techCount.style.display = "none";

    let data = document.getElementById('techtreedata').dataset.techtree;
    let email = document.getElementById('username').dataset.email;

    console.log(email);
    console.log(data);
    console.log(typeof(data));
    
    if(email != null) {
      let data2 = data.split(',');
      console.log(data2);
      sessionStorage.setItem('data', JSON.stringify(data2));
    }

    if(window.sessionStorage.getItem('data') != null) {
      console.log('aa');
      techs = JSON.parse(window.sessionStorage.getItem('data'))
      for (t of techs) {
        var paths = searchTree(root, t, []);
        if(typeof(paths) !== "undefined") {
          openPaths(paths);
          console.log(paths);
        }
        else{
          // alert(t +" not found!");
        }
      }
    }
  })

    function recommend() {  // click ÌñàÏùÑ ÎñÑ event Ìï®Ïàò
      let save = [];
      let save2 = [];
      search_select_node(root, save)
      for(i of save) {
        save2.push(i.name); //save Í∞ùÏ≤¥Ïùò nameÎßå ÎΩëÏïÑÏÑú push
        
      }
      console.log(save2);
      console.log(save);
      //fetch("/recommend2?data="+JSON.stringify(save2))
      sessionStorage.setItem('data', JSON.stringify(save2));
      // let data = JSON.parse(sessionStorage.getItem('item'));

      window.location = "/recommend?data="+encodeURIComponent(JSON.stringify(save2)) // window.locationÏúºÎ°ú Ï£ºÏÜåÎ°ú dataÎ•º Î¨∏ÏûêÏó¥Î°ú Î≥¥ÎÇ¥Ï§å
    }
    
    function category() {      
      let resData;
      let right = document.getElementById('tree-right');
      let choice = document.getElementById('choicePosition');
      let cate = document.getElementById('relatedPosition');
      let rightCompany = document.getElementById('right-company');
      // let hide = document.getElementsByClassName('right-company');
      // console.log(hide);
      // for(let i=0; i<hide.length; i++) {
      //   hide[i].style.display = "flex";
      // }

      // let company = document.getElementsByClassName('card-right');
      // console.log(company);
      rightCompany.innerHTML = "";
      choice.innerHTML = "";
      cate.innerHTML = "";
      // pageRight.innerHTML = "";

      let save = [];
      let save2 = [];
      search_select_node(root, save)
      for(i of save) {
        save2.push(i.name); //save Í∞ùÏ≤¥Ïùò nameÎßå ÎΩëÏïÑÏÑú push
      }
      console.log(save2);
      console.log(save);

      // sessionStorage.setItem('data', JSON.stringify(save2));

      choice.innerHTML += `<p class="right-title choice-title"><span>üíª</span> ÏÑ†ÌÉù Í∏∞Ïà† <strong class="right-info badge badge-light">${save2}</strong> Ïóê Îî∞Î•∏ Ìè¨ÏßÄÏÖò Ï∂îÏ≤ú</p>`;
      // choice.innerHTML += ``;
      $.ajax({
        url: '/recommend',
        method: 'POST',
        headers: {
          "Content-type": "application/json; charset=UTF-8"
        },
        data: JSON.stringify({
          data: save2
        }),
        async: false,
        success: function(response) {
          console.log(response);
          // alert('success!');
          resData = response;
          // let pageRight = document.getElementById('right-text');
          choice.innerHTML += `<p class="more"><a class="btn btn-outline-primary" href="#" onclick="recommend()">Îçî ÎßéÏùÄ Íµ¨Ïù∏Í≥µÍ≥† Î≥¥Í∏∞ >></a></p>`;
          // let companies = response;
          let position_list = [];
          for(let j of Object.keys(resData)) {
            let company = resData[j];
            // console.log(company);
            for(let k=0; k<company.length; k++) {
              let position_category = company[k].position_category.split(',');
              // console.log(company[k].positionId);
              
              for(let l=0; l<position_category.length; l++) {
                position_list.push(position_category[l].trim());
              }
            }
          }
          for(let q of Object.keys(resData)) {
            let company = resData[q];
            for(let w=0; w<company.length; w++) {
              rightCompany.innerHTML += `<div class="right-company">
                                              <div class="entire-info">
                                                <div class="right-pictures">
                                                <img src="${company[w].logo_src}" />
                                                </div>
                                                <div class="caption">
                                                  <h4>${company[w].position}</h4>  
                                                  <p>${company[w].company}</p>  
                                                </div>
                                              </div>
                                            </div>`
              if(w == 1) {
                break;
              }
            }
          }
          // console.log(position_list);
          let result = {};
          let totalCount = 0;
          position_list.forEach((x) => {
            if(result[x]) {
              result[x] = result[x] + 1;
              totalCount++;
            }else {
              result[x] = 0 + 1;
              totalCount++;
            }
          });
          // console.log(totalCount);
          let sortobj = [];
          for(let number in result) {
            sortobj.push([number, result[number]]);
          }
          sortobj.sort(function(a,b) {
            return b[1] - a[1];
          });

          // console.log(sortobj);
          let chart_data =[];
          let chart_categories = [];
          cate.innerHTML += `<p class="right-title"><span>üíº</span> Í¥ÄÎ†® ÏßÅÎ¨¥ TOP 5</p>`;
          for(let a=0; a<sortobj.length; a++) {
            let eachCount = sortobj[a][1];
            let percentage = (eachCount * 100 / totalCount).toFixed(1);
            // console.log(percentage);

            let cate = document.getElementById('relatedPosition');
            // cate.innerHTML += `<p class="right-info">${sortobj[a][0]}<span> ${percentage}%</span></p>`;
            chart_data.push(sortobj[a][0]);
            chart_categories.push(percentage);
            if(a == 4) {
              break; 
            }
          }
          console.log(chart_data);
          console.log(chart_categories);
          var ctx = document.getElementById('myChart').getContext('2d');
          var myChart = new Chart(ctx, {
              type: 'horizontalBar',  //horizontalBar
              data: {
                  labels: chart_data,
                  datasets: [{
                      label: 'Related Positions (%)',
                      data: chart_categories,
                      backgroundColor: [
                          'rgba(255, 159, 64, 1)',
                          'rgba(54, 162, 235, 1)',
                          'rgba(255, 206, 86, 1)',
                          'rgba(75, 192, 192, 1)',
                          'rgba(153, 102, 255, 1)',
                          'rgba(255, 159, 64, 1)'
                      ],
                      borderColor: [
                          'rgba(255, 159, 64, 1)',
                          'rgba(54, 162, 235, 1)',
                          'rgba(255, 206, 86, 1)',
                          'rgba(75, 192, 192, 1)',
                          'rgba(153, 102, 255, 1)',
                          'rgba(255, 159, 64, 1)'
                      ],
                      borderWidth: 1
                  }]
              },
              options: {
                  scales: {
                      yAxes: [{
                          ticks: {
                              beginAtZero: true
                          }
                      }]
                  }
              }
          });
        },
        error: function(err) {
          console.log(err);
        }        
      });    
      // console.log(resData);
    }

    function refresh() {
      sessionStorage.removeItem('data');
      window.location.reload();
    }

    function gotologin() {
      location.replace('/login');
    }

    function timer() {
      setTimeout('gotologin()', 1500);
    }

    function saveData() {
      let save = [];
      let save2 = [];
      search_select_node(root, save)
      for(i of save) {
        save2.push(i.name); //save Í∞ùÏ≤¥Ïùò nameÎßå ÎΩëÏïÑÏÑú push
      }
      console.log(save2);

      $.ajax({
        url: '/techtree',
        method: 'POST',
        headers: {
          "Content-type": "application/json; charset=UTF-8"
        },
        data: JSON.stringify({
          data: save2
        }),
        success: function(response) {
          // Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§ ÌåùÏóÖ Ï∂îÍ∞ÄÌïòÍ∏∞ !
          if(response == false) {
            console.log(response);
            // alert('Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©ÌïòÏÑ∏Ïöî.');
            Swal.fire({
             position: 'center',
             icon: 'error',
             title: 'Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©ÌïòÏÑ∏Ïöî.',
             showConfirmButton: false,
             timer: 1500
            })
            timer()
            // window.location = "/login";
          }else{
            console.log(response);
            // alert('save!');
            Swal.fire({
             position: 'center',
             icon: 'success',
             title: 'Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.',
             showConfirmButton: false,
             timer: 1500
            })
          }
        },
        error: function(err) {
          alert('fail!')
        }
      });
    }

    //basically a way to get the path to an object
    function searchTree(obj,search,path) {
      if(obj.name === search){ //if search is found return, add the object to the path and return it
        path.push(obj);
        return path;
      }
      else if(obj.children || obj._children){ //if children are collapsed d3 object will have them instantiated as _children
        var children = (obj.children) ? obj.children : obj._children;
        for(var i=0; i<children.length; i++){
          path.push(obj);// we assume this path is the right one
          var found = searchTree(children[i],search,path);
          if(found){// we were right, this should return the bubbled-up path from the first if statement
            return found;
          }
          else{//we were wrong, remove this parent from the path and continue iterating
            path.pop();
          }
        }
      }
      else{//not the right object, return false so it will continue to iterate in the loop
        return false;
      }
      
    }

    function search_select_node(obj, path) {
      let root = "Programming Language";
      if(obj.children || obj._children){ //if children are collapsed d3 object will have them instantiated as _children
        var children = (obj.children) ? obj.children : obj._children; // childrenÏù¥ Ìé¥Ï†∏ÏûàÎäî Ïï†Îì§Ïù¥Î©¥ children, Ï†ëÌòÄÏûàÎäî Ïï†Îì§Ïù¥Î©¥ _children
        let flag = true;
        for(var i=0; i<children.length; i++){ 
          if (children[i].class == 'found') { // childrenÏùò classÍ∞Ä(ÏÑ†ÌÉùÎêòÏñ¥) foundÎ©¥
            search_select_node(children[i],path); // Ïû¨Í∑ÄÎ°ú childrenÏùÑ Í≥ÑÏÜç Îèî
            // flag = false; // flagÎ•º falseÎ°ú Î≥ÄÌôò(ÏóÜÏúºÎ©¥) => Í±∏Î¶º
          }
        }
        if (flag) { 
          if(obj.name != root) {
            path.push(obj); // ÎßåÏïΩ classÍ∞Ä foundÎ©¥ pathÏóê Ìï¥Îãπ childrenÏùÑ ÎÑ£Ïñ¥Ï§å
          }
          // path.push(obj); // pathÏóê Ìï¥Îãπ childrenÏùÑ ÎÑ£Ïñ¥Ï§å
        }
      }else {
        if(obj.class == 'found') {
          if(obj.name != root) {
            path.push(obj); // ÎßåÏïΩ classÍ∞Ä foundÎ©¥ pathÏóê Ìï¥Îãπ childrenÏùÑ ÎÑ£Ïñ¥Ï§å
          }
        }
      }
    }
  
    function extract_select2_data(node,leaves,index) {
            if (node.children){
                for(var i = 0; i<node.children.length; i++){
                    index = extract_select2_data(node.children[i],leaves,index)[0];
                }
            }
            else {
                leaves.push({id:++index,text:node.name});
            }
            return [index,leaves];
    }
    
    // let zoom = d3.behavior.zoom()
    //   .scaleExtent([.1,1])
    //   .on('zoom', function() {
    //     svg.attr('transform', 'translate(' + d3.event.translate + ') scale(' + d3.event.scale + ')');
    //   })
    //   .translate([150,200]);

    // var div = d3.select("body")
    //   .append("div") // declare the tooltip div
    //   .attr("class", "tooltip")
    //   .style("opacity", 0);
      var margin = {top: 1500, right: 25, bottom: 0, left: 50},
      width = 800 - margin.right - margin.left,
      height = 2750 - margin.top - margin.bottom;
  
    var i = 0,
      duration = 750,
      root,
      select2_data;
  
    var diameter = 960;
  
    var tree = d3.layout.tree()
      // .size([height, width])
      .nodeSize([60, 60])
      .separation(function() {
        return .6;
      })
  
    var diagonal = d3.svg.diagonal()
      .projection(function(d) { return [d.y, d.x]; });
    
    let boxWidth = 150,
        boxHeight = 40;

    var svg = d3.select("#tree-left").append("svg")
      .attr("width", width + margin.right + margin.left)
      .attr("height", height + margin.top + margin.bottom)
      // .attr('width', 1500)
      // .attr('height', 800)
      .append("g")
      .attr("id", "g-tech-tree")
      // .call(zoom)
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      // .attr('transform', 'translate(150,200)');
          //console.log(d3.select("#g-tech-tree"))
      //console.log(document.getElementById("g-tech-tree").getBoundingClientRect().height/2)
    // Ïä§ÌÅ¨Î°§Î∞î ÏúÑÏπò Î≥ÄÍ≤Ω
    document.getElementById("tree-left").scrollTop = document.getElementById("tree-left").getBoundingClientRect().height; //document.getElementById("g-tech-tree").getBoundingClientRect().height/2;

    //recursively collapse children
    function collapse(d) {
      if (d.children) {
        d._children = d.children;
        d._children.forEach(collapse);
        d.children = null;
      }
    }
        // ÌéºÏπòÍ∏∞ Íµ¨ÌòÑ (ÏúÑÏóê collapseÎäî Ï†ëÍ∏∞)
        function expand(d){
      if (d._children) {
        d.children = d._children;
        d.children.forEach(expand);
        d._children = null;
      }
    }

    //Ï†ÑÏ≤¥ ÌéºÏπòÍ∏∞ Ï†ëÍ∏∞ Íµ¨ÌòÑ
    let expandCollapseAllFlag = false
    function expandCollapseAll(){
      let techCount = document.getElementById('tech_count');
      techCount.innerHTML = 'Ï¥ù 112Í∞úÏùò Í∏∞Ïà†'
      techCount.style.display = "flex";
      
      if (!expandCollapseAllFlag) {
        root.children.forEach(expand);
        update(root);
        expandCollapseAllFlag = true
        document.getElementById("tree-left").scrollTop = 0;
      } else {
        root.children.forEach(collapse);
        update(root);
        expandCollapseAllFlag = false
        document.getElementById("tree-left").scrollTop = document.getElementById("tree-left").getBoundingClientRect().height;
      }
    }
  
    // Toggle children on click
    function click(d) {
      if(d.class == 'found') {
        d.class = '';
        if (d.children != null) {
          // ÏûêÏãù ÎùºÏù¥Î∏åÎü¨Î¶¨ Î™®Îëê ÏÑ†ÌÉù Ï∑®ÏÜå
          for (let child of d.children) {
            child.class = null;
          }
          // Ìä∏Î¶¨ ÏûêÏãù Í∞êÏ∂îÍ∏∞
          d._children = d.children;
          d.children = null;
        }
      }else {
        // Î∞ëÏóê ÏûêÏãùÎÖ∏Îìú ÏÑ†ÌÉùÏãú Î™®Îì† Î∂ÄÎ™®ÎÖ∏Îìú ÏÑ†ÌÉù
        function parentSelect(n) {
          n.class = 'found'
          if (n.parent != null) {
            parentSelect(n.parent)
          }
        }

        d.class = 'found';
        parentSelect(d)
        if (d._children) {
          d.children = d._children;
          d._children = null;
        }
      }
      
      // if (d.children) {
      //  d._children = d.children;
      //   d.children = null;
      //   }
      //   else{
      //   d.children = d._children;
      //   d._children = null;
      //   }
      update(d);
    }
  
    function openPaths(paths) {
      for(var i =0; i<paths.length; i++){
        if(paths[i].id !== "1"){
          paths[i].class = 'found';
          if(paths[i]._children){
            paths[i].children = paths[i]._children;
              paths[i]._children = null;
          }
          update(paths[i]);
        }
      }
    }
  
    d3.json("js/data.json", function(error,values){
      if(error) {
        return console.error(error);
      }

      root = values;
      select2_data = extract_select2_data(values,[],0)[1];

      root.x0 = height / 2;
      // root.x0 = 0;
      root.y0 = 0;
      root.children.forEach(collapse);
      update(root);
      //init search box
      // $("#search").select2({
      //   data: select2_data,
      //   containerCssClass: "search"
      // });
    });

    // attach search box listener
    $("#search").on("select2-selecting", function(e) {
      var paths = searchTree(root,e.object.text,[]);
      if(typeof(paths) !== "undefined"){
        openPaths(paths);
        console.log('path')
        console.log(paths);
      }
      else{
        alert(e.object.text+" not found!");
      }
    })
  
    // d3.select(self.frameElement).style("height", "1000px");
  
    function update(source) {
      // Compute the new tree layout.
      var nodes = tree.nodes(root).reverse(),
      links = tree.links(nodes);
  
      // Normalize for fixed-depth.
      nodes.forEach(function(d) { d.y = d.depth * 150; });
  
      // Update the nodes√¢‚Ç¨¬¶
      var node = svg.selectAll("g.node")
        .data(nodes, function(d) { return d.id || (d.id = ++i); });
  
      // Enter any new nodes at the parent's previous position.
      var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      // .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .attr('transform', function(d) {
        return 'translate(' + (source.x0 + boxWidth/2) + ',' + source.y0 + ')';
      })
      .on("click", click);
      // .on('click', togglePerson);
  
      nodeEnter.append("circle")
      .attr("r", 1e-6)
      .attr('class', 'circle')
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

      // nodeEnter.append('rect')
      //   .attr({
      //     x: 0,
      //     y: 0,
      //     width: 0,
      //     height: 0
      //   });

      nodeEnter.append("text")
      .attr("dx", function(d) {
          if (d.name == "Programming Language") {
            return "5em"
          }
          return d.children || d._children ? -10 : 10;
        })
        .attr("dy", function(d) {
          if (d.name == "Programming Language") {
            return "-1em"
          }
          return ".35em"
        })
        .attr('class', 'name')
        .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
        .style("fill-opacity", 1e-6)
        .text(function(d) { return d.name; })
        .attr("transform", function(d){
          if (d.name == "Programming Language") {
            return "rotate(270)"
          }
          else {
            return ""
          }
        })
        // .attr('dx', 5)
        // .attr('dy', -50)
        // .attr('text-anchor', 'start')
        // .attr('class', 'name')
        // .text(function(d) {
        //   return d.name;
        // })
        // .style('fill-opacity', 0);
  
      // Transition nodes to their new position.
      var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
  
      nodeUpdate.select("circle")
        .attr("r", 7.5)
        .style("fill", function(d) {
          if(d.class === "found"){
            return "#ff4136"; //red
          }
          else if(d._children){
            return "lightsteelblue";
          }
          else{
            return "#fff";
          }
        })
        .style("stroke", function(d) {
          if(d.class === "found"){
            return "#ff4136"; //red
          }
      });

      // nodeUpdate.select('rect')
      //   .attr({
      //     x: -(boxWidth/2),
      //     y: -(boxWidth/2),
      //     width: boxWidth,
      //     height: boxHeight
      //   })
      //   .style('fill', function(d) {
      //     if(d.class === 'found') {
      //       return '#549BD6';
      //     }else if(d._children) {
      //       return 'lightsteelblud';
      //     }else {
      //       return '#fff';
      //     }
      //   })
      //   .style('stroke', function(d) {
      //     if(d.class === 'found') {
      //       return '#549BD6';
      //     }
      //   });
        
      nodeUpdate.select("text")
        .style("fill-opacity", 1);
      // nodeUpdate.select('text')
      //   .attr('dx', -(boxWidth/2) + 5)
      //   .style('fill-opacity', 1);
  
      // Transition exiting nodes to the parent's new position.
      var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + source.x + "," + source.y + ")"; })
        .remove();
  
      nodeExit.select("circle")
        .attr("r", 1e-2);
      // nodeExit.select('rect')
      //   .attr({
      //     x: 0,
      //     y: 0,
      //     width: 0,
      //     height: 0
      //   });
  
      nodeExit.select("text")
        .style("fill-opacity", 1e-6);
      // nodeExit.select('text')
      //   .style('fill-opacity', 0)
      //   .attr('dy', 0);
        
      nodes.forEach(function(d) {
        d.x0 = d.x;
        d.y0 = d.y;
      })
  
      // Update the links√¢‚Ç¨¬¶
      var link = svg.selectAll("path.link")
        .data(links, function(d) { return d.target.id; });
  
      // Enter any new links at the parent's previous position.
      link.enter().insert("path", "g")
        .attr("class", "link")
        .attr("d", function(d) {
          var o = {x: source.x0, y: source.y0};
          return diagonal({source: o, target: o});
        });
      // link.enter().append('path')
      //   .attr('class', 'link')
      //   .attr('d', function(d) {
      //     let o = {x: source.x0, y: (source.y0 + boxWidth/2)};
      //     return transitionElbow({source: o, target: o});
      //   });
  
      // Transition links to their new position.
      link.transition()
        .duration(duration)
        .attr("d", diagonal)
        .style("stroke",function(d){
          if(d.target.class==="found"){
            return "#ff4136";
          }
        });
      // link.transition()
      //   .duration(duration)
      //   .attr('d', diagonal)
      //   .style('stroke', function(d) {
      //     if(d.target.class === 'found') {
      //       return '#ff4136';
      //     }
      //   })
      //   .attr('d', elbow);
  
      // Transition exiting nodes to the parent's new position.
      link.exit().transition()
        .duration(duration)
        .attr("d", function(d) {
          var o = {x: source.x, y: source.y};
          // let o = {x: source.x, y: (source.y + boxWidth/2)};
          return diagonal({source: o, target: o});
          // return transitionElbow({source: o, target: o});
        })
        .remove();
  
      // Stash the old positions for transition.
      nodes.forEach(function(d) {
        d.x0 = d.x;
        d.y0 = d.y;
        });
    }

    // function elbow(d) {
    //     var sourceX = d.source.x,
    //         sourceY = d.source.y + (boxWidth / 2),
    //         targetX = d.target.x,
    //         targetY = d.target.y - (boxWidth / 2);

    //     return "M" + sourceY + "," + sourceX
    //       + "H" + (sourceY + (targetY-sourceY)/2)
    //       + "V" + targetX 
    //       + "H" + targetY;
    //   }

    // function transitionElbow(d){
    //     return "M" + d.source.x + "," + d.source.x
    //       + "H" + d.source.y
    //       + "V" + d.source.x 
    //       + "H" + d.source.y;
    // }

  </script>










  <!-- <script>
    var nodes = null;
    var edges = null;
    var network = null;

  function draw(nodes, edges) {
  // create people.
  // value corresponds with the age of the person

  // Instantiate our network object.
/*
  var container = document.getElementById("mynetwork");
  var data = {
    nodes: nodes,
    edges: edges,
  };
  var options = {
    nodes: {
      shape: "dot",
      scaling: {
        customScalingFunction: function (min, max, total, value) {
          return value / total;
        },
        min: 1,
        max: 1,
      },
    },
    layout: {
      improvedLayout: false
    },
    physics: false,
  };
  network = new vis.Network(container, data, options);
*/
 
  var container = document.getElementById("mynetwork");
  var options = {
    nodes: {
      // color: '#000000',
      shape: "dot",
      scaling: {
        min: 10,
        max: 100,
        // label: {
        //   min: 12,
        //   max: 30,
        //   drawThreshold: 12,
        //   maxVisible: 50,
        // },
      },
      font: {
        size: 24,
        face: "Tahoma",
        bold: {
          size: 30,
          vadjust: 0,
          mod: 'bold'
        }
      },
    },
    edges: {
      width: 0.10,
      color: { inherit: true },
      smooth: {
        type: "continuous",
      },
    },
    physics: false,
    interaction: {
      tooltipDelay: 200,
      hideEdgesOnDrag: true,
      //hideEdgesOnZoom: true,
    },
    layout: {
      improvedLayout: false
    },
  };

  var data = { nodes: nodes, edges: edges };
  // Note: data is coming from ./data/WorldCup2014.js
  network = new vis.Network(container, data, options);
  
}

window.addEventListener("load", () => {
  fetch("/dataset")
    .then(response => response.json())
    .then(json => {
      console.log(json.nodes, json.edges);
      draw(json.nodes, json.edges);
    });
});

  </script> -->

    <div class="footer-dark text-left">
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-sm-6 col-md-3 item">
                    <h3>Services</h3>
                    <ul>
                        <li><a href="#">Web design</a></li>
                        <li><a href="#">Development</a></li>
                        <li><a href="#">Hosting</a></li>
                    </ul>
                </div>
                <div class="col-sm-6 col-md-3 item">
                    <h3>About</h3>
                    <ul>
                        <li><a href="#">Company</a></li>
                        <li><a href="#">Team</a></li>
                        <li><a href="#">Careers</a></li>
                    </ul>
                </div>
                <div class="col-md-6 item text">
                    <h3>Company Name</h3>
                    <p>Praesent sed lobortis mi. Suspendisse vel placerat ligula. Vivamus ac sem lacus. Ut vehicula rhoncus elementum. Etiam quis tristique lectus. Aliquam in arcu eget velit pulvinar dictum vel in justo.</p>
                </div>
            </div>
            <p class="copyright">Company Name ¬© 2020</p>
        </div>
    </footer>
  </div>
</body>
</html>